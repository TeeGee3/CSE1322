Main Class driver, and a StockItem class  --- https://ccse.kennesaw.edu/fye/CSE1322%20Lab%202.pdf

Driver output: 
  1. Sold One Milk 
  2. Sold One Bread 
  3. Change price of Milk 
  4. Change price of Bread 
  5. Add Milk to Inventory 
  6. Add Bread to Inventory 
  7. See Inventory 
  8. Quit 



=====================================================================

import java.util.Scanner;

public class Lab2a {

    public static void main(String[] args){

        StockItem milk = new StockItem("1 Gallon of Milk", 3.60f, 15);
        StockItem bread = new  StockItem("1 Load of Bread", 1.98f, 30);

//      System.out.print("1. Sold One Milk \n2. Sold One Bread \n3. Change price of Milk \n4. Change price of Bread \n5. Add Milk to Inventory \n6. Add Bread to Inventory \n7. See Inventory \n8. Quit \n");

        Scanner sc = new Scanner(System.in);
        int userChoice;


        do{
            System.out.print("1. Sold One Milk \n2. Sold One Bread \n3. Change price of Milk \n4. Change price of Bread \n5. Add Milk to Inventory \n6. Add Bread to Inventory \n7. See Inventory \n8. Quit \n");
             userChoice = sc.nextInt();

             switch (userChoice){
                 case 1: milk.setLowerQuantity(1); break;

                 case 2: bread.setLowerQuantity(1); break;

                 case 3:
                     float price;
                     System.out.println("What is the new price of milk?");
                     price = sc.nextFloat(); milk.setPrice(price); break;

                 case 4:
                     System.out.println("What is the new price of bread?");
                     price = sc.nextFloat(); bread.setPrice(price); break;

                 case 5:
                     int quantity;
                     System.out.println("How much milk did we get?");
                     quantity = sc.nextInt(); milk.setRaisedQuantity(quantity); break;
                 case 6:
                     System.out.println("How much bread did we get?");
                     quantity = sc.nextInt(); bread.setRaisedQuantity(quantity); break;
                 case 7:

                     System.out.println(); System.out.println("MILK: "+milk.toString()); System.out.println("Bread: "+bread.toString()+"\n"); break;

             }

        }while ( userChoice != 8);


    }
}



class StockItem {

    String description; //desc of stock item
    static int id; // unique integer ID number
    float price; // holds price rounded to nearest penny
    int quantity; // how many in stock?
    long cool = 10;

    //default constructor
    StockItem() {
        description = null;
        id = (int) Math.random() * 1000; // static variable that assigns random number to stock item
        price = 0.00f;
        quantity = 0;
    }

    //overloaded constructor - description, price, quantity
    StockItem(String d, float p, int q) {
        description = d;
        price = p;
        quantity = q;
    }

    //overridden - toString/ToString method that prints all details of the stock item.
    public String toString() {
        //this should "override" it, but maybe add prints of details here if return does not print?
        return  "We have "+description + ", with ID of " + id + ", at the price of " + price + ", we currently have " + quantity+ " in stock";
    }


    //methods
    //getters
    //retrieve and print/return d, ID, price, Q
    public String getDescription() {
        return description;
    }

    public int getId() {
        return id;
    }

    public float getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }


    //setter
    // take in and set new price for item
    public void setPrice(float price) {
        this.price = price;
        if (this.quantity < 0) {
            System.out.println("Error: price below zero");
        }
    }

    //take in amount to deduct and lower quantity by num, print error below zer0
    public void setLowerQuantity(int quantity) {
        this.quantity -= quantity;
        if (this.quantity < 0) {
            System.out.println("Error: Quantity below zero");
        }
    }

    //take in amount to add and increase q by number
    public void setRaisedQuantity(int quantity) {
        this.quantity += quantity;
    }

}
