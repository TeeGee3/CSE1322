/* https://ccse.kennesaw.edu/fye/CSE1322L%20Assignment%202%20v3.pdf
Summary: Take each letter of the alphabet and shift it three letters to the right. You’d
encrypt the letter ‘a’ to the letter ‘d’ (because ‘d’ is three letters to the right of ‘a’ in the
alphabet). ‘b’ would become ‘e’, ‘c’ would become ‘f’... ‘w’ would become ‘z’, ‘x’ wraps
around to ‘a’, ‘y’ wraps around to ‘b’, and ‘z’ wraps around to ‘c’.
As an example, if you took the “plaintext”: class, it would encrypt as:
 c -> f
 l -> p
 a -> d
 s -> v
 s -> v
So the “ciphertext” would be fpdvv.
*/


import java.util.ArrayList;
import java.util.Scanner;

public class Assignment2a { //driver program
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);  // I like to set this in the beginning to get it out the way

        Caesar message1 = new Caesar();
        int userInput;

         do{
            System.out.print("1 Encrypt a message\n" +
                    "2 Decrypt a message\n" +
                    "3 Quit");

            System.out.println();
             userInput = Integer.parseInt(sc.nextLine());


        String encryptedMessage = "";
        String plainText = "";

        if (userInput == 1){
            System.out.println("What is the message to encrypt?");
            plainText = sc.nextLine();
            plainText = plainText.toLowerCase();
            encryptedMessage = message1.encrypt(plainText);
            System.out.print("Encrypted Message: "+encryptedMessage);
            System.out.println();

        }

        if(userInput == 2) {
            System.out.println("What is the encrypted message?");
            encryptedMessage = sc.nextLine();
            encryptedMessage = encryptedMessage.toLowerCase();
            plainText = message1.decrypt(encryptedMessage);
            System.out.print("decrypted Message: " + plainText);
            System.out.println();

        }



}while( userInput != 3);

            }
        }


     class Caesar {
        ArrayList<Character> alphabet = new ArrayList<Character>();

        public Caesar() {
            for (char letter = 'a'; letter <= 'z'; letter++) {
                alphabet.add(letter);
            }
        }

        public int positions_of_char(char letter) { //takes in character referenced as letter
            // a method which takes ina character and returns the index of that character in the arraylist (ex: a = 0 , b = 1)
            int position;

            // need to search array list for target letter
            position = alphabet.indexOf(letter); //finds the letter position in alphabet

            return position; //returns the index number
        }


        public char letter_at_pos(int num) { //takes in integer
            char letter;
            letter = alphabet.get(num); // retrieves letter from arraylist based on index number
            return letter;
        }

        public char encrypt_char(char letter) {
            char eLetter; //the encrypted letter
            int positionL = -1;

            positionL = positions_of_char(letter); // sets positionL as the number of index where letter is found
            int i = 0;

            while (positionL < 26 && i < 3) { //while the position is less than 26 and  have not added 3 positions to eLetterPos
                positionL = positionL + 1; //eLetterPos equals the positionL + 1, until it has gone 3 times ( i < 4)
                i++;
                if(positionL == 26) {  //but if eLetterPos has reached 26, then subtract to get to pos 0 AKA A and continue until you have increased by 3
                    positionL = positionL - 26; }
            }

            eLetter = letter_at_pos(positionL);  // eLetter is equal to a character that was found as the position given
            return eLetter;
        }

        public char decrypt_char(char letter) {
            char dLetter;
            int positionL = -1;

            positionL = positions_of_char(letter); // sets positionL as the number of index where letter is found
            int i = 0;

            while (positionL >=0 && i < 3) { //while the position is greater than or equal to 0 and  have not added 3 positions to dLetterPos
                positionL = positionL - 1; //eLetterPos equals the positionL - 1, until it has gone 3 times ( i < 4)
                i++;
                if (positionL == -1) {  //but if eLetterPos has reached 26, then subtract to get to pos 0 AKA A and continue until you have increased by 3
                    positionL = positionL + 26;
                }
//                if(positionL == 26) {  //but if eLetterPos has reached 26, then subtract to get to pos 0 AKA A and continue until you have increased by 3
//                    positionL = positionL - 26; }

            }
            dLetter = letter_at_pos(positionL);  // eLetter is equal to a character that was found as the position given


            return dLetter;
        }

        public String encrypt(String plainText) {  //takes in a plain text string and translates it by using encrypt_char method
            String cipherText = "";
            for (int i = 0; i < plainText.length(); i++) {
                cipherText += encrypt_char(plainText.charAt(i));
            }
            return cipherText;  //returns a encrypted string
        }

        public String decrypt(String cipherText) {
            String plainText = "";
            for (int i = 0; i < cipherText.length(); i++) {
                plainText += decrypt_char(cipherText.charAt(i));
            }
            return plainText;
        }

    }
