https://ccse.kennesaw.edu/fye/CSE1322L%20Assignment%204%20spring%202022%20v1.1.pdf


CSE1322L Assignment 4
Background:
Topics
- Inheritance
- Polymorphism
- Super/Base
- ArraysList (Java) / List (C#)
- Static variables/methods
- ToString Override
For this assignment, you will code a basic loan management system, which is depicted
in the following UML (unified modeling language) diagram:
This assignment is designed to emphasize the topics covered in this week’s classes. In
the coming weeks, as we cover more advanced topics (i.e. interfaces, abstract classes,
and casting), our assignments will include the new topics.
Your task:
For this assignment, you will implement the Loan, StudentLoan and AutoLoan classes,
utilizing the fundamentals of inheritance, polymorphism, and ArrayLists (Java) / Lists
(C#).
Define the following three classes:
1) Loan Class
a) Must have the following attributes:
- customerName, string, private, employee’s full name
- accountNumber, int, private, unique account number
- loanBalance, double, private, balance of customer loan
- monthlyPayment, double, private, amount of each monthly payment
- interestRate, double, private, amount of interest rate
- numberOfMonthlyPayments, int, private, number of monthly loan
payments
- numberOfLoans, int, static, private, unique identifier used as account
number, initialized with zero (0) (incremented by one each time an
object is created)
b) Must have an overloaded constructor which:
- takes in a parameter, name, of type string, and assigns it to the
customerName attribute
- takes in a parameter, amount, of type double, and assigns it to the
loanBalance attribute
- takes in a parameter, rate, of type double, and assigns it to the
interestRate attribute
- takes in a parameter, months, of type int, and assigns it to the
numberOfMonthlyPayments attribute
- assigns the value of ++numberOfLoans to the accountNumber attribute
(i.e. the creation of each object increments the numberOfLoans
attribute, which is assigned to the accountNumber attribute)
c) Must have a static method called getNumberOfLoans, which returns the
value of the static attribute numberOfLoans
d) Must have getter/setter methods for all attributes (no setter method
needed for numberOfLoans attribute)
e) Must have a static method called decreaseNumberOfLoans, which returns
no value, takes in no parameters, and decrements the static attribute
numberOfLoans by one (1) (i.e. numberOfLoans--)
f) Must have a method called calculateMonthlyPayment, which returns no
value, takes in no parameters, calculates the amount of monthly payment,
and stores it in the monthlyPayment attribute, using the following formula:
P = monthly payment
PV = amount of loan
r = interest rate
n = number of payments
(hint: consider using the Math class method Power for exponents)
g) Must override the tostring method to return a string which includes a label
and value for all attributes (i.e. Customer Name, Account Number, Loan
Balance, Monthly Payment, Interest Rate, Number of Monthly Payments)
2) StudentLoan Class
a) Must inherit Loan Class
b) Must have the following attribute:
- isDeferred, boolean, private, Indicates whether the loan is in deferment
(true or false)
c) Must have an overloaded constructor which:
- takes in a parameter, name, of type string
- takes in a parameter, amount, of type double
- takes in a parameter, rate, of type double
- takes in a parameter, months, of type int
- takes in a parameter, isDef, of type boolean, and assigns it to
isDeferred
- call parent (base/super) constructor, passing the following values:
name, amount, rate, months
d) Must have getter/setter methods for the isDeferred attribute
e) Must override the method calculateMonthlyPayment, which returns no
value, takes in no parameters, calculates the amount of monthly payment,
and stores it in the monthlyPayment attribute, using the following:
If the loan is in deferment, the amount of monthly payment is zero (0).
If the loan is not in deferment, the amount of the monthly payment is
calculated as follows:
P = monthly payment
PV = amount of loan
r = interest rate
n = number of payments
(hint: consider using the Math class method Power for exponents)
f) Must override the tostring method to return a string which includes a label
and value for all attributes (i.e. Customer Name, Account Number, Loan
Balance, Monthly Payment, Interest Rate, Number of Monthly Payments,
and Is Deferred) Note: most of this is in the parent (base/super) toString.
3) AutoLoan Class
a) Must inherit Loan Class
b) Must have the following attribute:
- downPayment, double, private, Amount of down payment
c) Must have an overloaded constructor which:
- takes in a parameter, name, of type string
- takes in a parameter, amount, of type double
- takes in a parameter, rate, of type double
- takes in a parameter, months, of type int
- takes in a parameter, down, of type double, and assigns it to the
downPayment attribute
- call parent (base/super) constructor passing the following values:
name, amount, rate, months
d) Must have getter/setter methods for the downPayment attribute
e) Must override the method calculateMonthlyPayment, which returns no
value, takes in no parameters, calculates the amount of monthly payment,
and stores it in the monthlyPayment attribute, using the following:
P = monthly payment
PV = (amount of loan) – (down payment)
r = interest rate
n = number of payments
(hint: consider using the Math class method Power for exponents)
f) Must override the tostring method to return a string which includes a label
and value for all attributes (i.e. Customer Name, Account Number, Loan
Balance, Monthly Payment, Interest Rate, Number of Monthly Payments,
and Down Payment) Note: most of this is in the parent (base/super)
toString.
Driver Program:
In the driver class:
- Create an ArrayList (Java) / List (C#) of Loan objects.
- Create a method addLoan, which returns no values and takes in one (1) parameter,
an arrayList (Java) / List (C#) of Loan objects:
• prompt the user to enter and read in a loan type (Student or Auto)
• prompt the user to enter and read in a customer name
• prompt the user to enter and read in a loan amount
• prompt the user to enter and read in a loan interest rate
• prompt the user to enter and read in the number of monthly payments
• if the loan type is Student:
 prompt the user to enter and read in whether the loan is deferred (true or
false)
 use the customer name, loan amount, interest rate, number of monthly
payments, and deferment to create a StudentLoan object and store the object
in the arrayList (Java) / List (C#)
• if the loan type is Auto:
 prompt the user to enter and read in the amount of down payment
 use the customer name, loan amount, interest rate, number of monthly
payments, and down payment to create an AutoLoan object and store the
object in the arrayList (Java) / List (C#)
- Create a method deleteLoan, which returns no values and takes in one (1)
parameter, an arrayList (Java) / List (C#) of Loan objects:
• prompt the user to enter and read in a customer name
• search the arrayList (Java) / List (C#) for the object containing the user provided
customer name
• if the object is found, remove the object from the arrayList (Java) / List (C#),
update the numberOfLoans attribute, and end the search
- Create a method calculateMonthlyLoanPayment, which returns no values and takes
in one (1) parameter, an arrayList (Java) / List (C#) of Loan objects:
• Traverse the entire arrayList (Java) / List (C#)
• For each object in the arrayList (Java) / List (C#), invoke the
calculateMonthlyPayment method to compute the amount of the monthly
payment.
- Create a method printLoans, which returns no values and takes in one (1)
parameter, an arrayList (Java) / List (C#) of Loan objects:
• Traverse the entire arrayList (Java) / List (C#)
• For each object in the arrayList (Java) / List (C#), print the object
- Using a loop, prompt the user with the following menu and read in the user’s
response:
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice:
• If the user enters 1, invoke the method addLoan
• If the user enters 2, invoke the method deleteLoan
• If the user enters 3, invoke the method calculateMonthlyLoanPayment
• If the user enters 4, invoke the method printLoans
• If the user enters 5, terminate the program
• If the user enters any character other than a 1, 2, 3, 4, or 5, the following error
message should display: Error: Please enter valid input, and the user should be
allowed to reenter a valid choice.
• Hint: In Java, you may want to make Scanner a static object in the main class
(i.e. static Scanner input = new Scanner(System.in)). This allows you to read in
input from the console from inside you user-defined methods.
Sample Output:
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 9
Error: Please Enter Valid Input
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 1
Enter Loan Type (1 – Student, 2 – Auto):
1
Enter Customer Name:
Michael Jordan
Enter Loan Amount:
1000.00
Enter Interest Rate:
5.00
Enter Number of Monthly Payments:
12
Is Loan Deferred? (Y or N):
N
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 1
Enter Loan Type (1 – Student, 2 – Auto):
2
Enter Customer Name:
Lebron James
Enter Loan Amount:
5000.00
Enter Interest Rate:
7.00
Enter Number of Monthly Payments:
72
Enter Amount of Down Payment:
1000.00
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 4
Customer Name: Michael Jordan, Account Number: 1, Loan Balance: 1000.00,
Monthly Payment: 0, Interest Rate: 5.00, Number of Monthly Payments: 12,
Deferment: false
Customer Name: Lebron James, Account Number: 2, Loan Balance: 5000.00,
Monthly Payment: 0, Interest Rate: 7.00, Number of Monthly Payments: 72, Down
Payment: 1000.00
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 2
Enter Customer Name: Lebron James
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 4
Customer Name: Michael Jordan, Account Number: 1, Loan Balance: 1000.00,
Monthly Payment: 0, Interest Rate: 5.00, Number of Monthly Payments: 12,
Deferment: false
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 3
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 4
Customer Name: Michael Jordan, Account Number: 1, Loan Balance: 1000.00,
Monthly Payment: 112.83, Interest Rate: 5.00, Number of Monthly Payments: 12,
Deferment: false
1 – Add Loan
2 – Delete Loan
3 – Calculate Monthly Payments
4 – Print Loans
5 – Exit
Enter Choice: 5
Submitting your answer:
Please follow the posted submission guidelines here:
https://ccse.kennesaw.edu/fye/submissionguidelines.php
Ensure you submit before the deadline listed on the lab schedule for CSE1322L here:
https://ccse.kennesaw.edu/fye/courseschedules.php
Rubric:
● Loan Class (19 points total)
○ Includes all attributes, with correct data types and modifiers (i.e. public,
private, static) (2 points)
○ Includes overloaded constructor, which takes in parameter(s) and
initializes attributes (5 points)
○ Includes getter/setter method(s) for attribute(s) (2 points)
○ Includes decreaseNumberOfLoans method (3 points)
○ Includes calculateMonthlyPayment method (5 points)
○ Includes override of toString (2 points)
● StudentLoan Class (18 points total)
○ Includes inheriting of parent class (2 points)
○ Includes attribute(s), with correct data type(s) and modifier(s) (i.e. public,
private, static) (2 points)
○ Includes overloaded constructor, which takes in parameter(s), initializes
attribute(s), and calls parent constructor (5 points)
○ Includes getter/setter method(s) for attribute(s) (2 points)
○ Includes override of calculateMonthlyPayment method (5 points)
○ Includes override of toString method ( 2 points)
● AutoLoan Class (18 points total)
○ Includes inheriting of parent class (2 points)
○ Includes attribute(s), with correct data type(s) and modifier(s) (i.e. public,
private, static) (2 points)
○ Includes overloaded constructor, which takes in parameter(s), initializes
attribute(s), and calls parent constructor (5 points)
○ Includes getter/setter method(s) for attribute(s) (2 points)
○ Includes override of calculateMonthlyPayment method (5 points)
○ Includes override of toString method (2 points)
● Driver program (45 points total)
○ Creates ArrayList (Java) / List (C#) of Loan objects (3 points)
○ Presents menu and reads user input (total 8 points)
- Prompts user with correct menu and reads in user choice (2 point)
- Provides error message for invalid user input (2 points)
- Allows user to reenter choice in case of invalid user input (2 points)
- Invokes correct method based on user input (2 points)
○ Includes printLoans method (total 6 points)
- includes correct parameter(s) (2 points)
- traverses entire ArrayList (Java) / List (C#) (2 points)
- prints object via toString method (2 points)
○ Includes calculateMonthlyLoanPayment method (total 6 points)
- includes correct parameter(s) (2 points)
- traverses entire ArrayList (Java) / List (C#) (2 points)
- invokes correct method to compute monthly payment (2 points)
○ Includes deleteLoan method (total 10 points)
- includes correct parameter(s) (2 points)
- prompts user for input and reads in input (2 points)
- searches ArrayList (Java) / List (C#) to find object (2 points)
- removes object from ArrayList (Java) / List (C#) (2 points)
- update number of loans attribute (2 points)
○ Includes addLoan method (total 12 points)
- includes correct parameter(s) (2 points)
- prompts user for input and reads in input (2 points)
- creates new Loan object(s) (5 points)
- adds object to ArrayList (Java) / List (C#) (3 points)
